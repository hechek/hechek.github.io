<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>헥헥 블로그</title>
    <link>https://hechek.github.io/index.xml</link>
    <description>Recent content on 헥헥 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 26 Feb 2017 13:56:32 +0900</lastBuildDate>
    <atom:link href="https://hechek.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>애플, &#39;iCloud.net&#39; 도메인 네임을 150만 불에 인수</title>
      <link>https://hechek.github.io/blog/2017-02-26-%EC%95%A0%ED%94%8C-icloud.net-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%84%A4%EC%9E%84%EC%9D%84-150%EB%A7%8C-%EB%B6%88%EC%97%90-%EC%9D%B8%EC%88%98/</link>
      <pubDate>Sun, 26 Feb 2017 13:56:32 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-26-%EC%95%A0%ED%94%8C-icloud.net-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%84%A4%EC%9E%84%EC%9D%84-150%EB%A7%8C-%EB%B6%88%EC%97%90-%EC%9D%B8%EC%88%98/</guid>
      <description>&lt;p&gt;해외 IT 매체인 맥루머스, 애플인사이더가 지난 21일(현지시각), &amp;lsquo;TechCrunch&amp;rsquo;의 기사를 인용하여 중국에서 소셜네트워크 제공 서비스를 제공하던 &amp;lsquo;iCloud.net&amp;rsquo;의 도메인을 150만 불에 사들인 것으로 보인다는 기사를 실었습니다.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;iCloud.net&amp;rsquo;은 사진, 문서, 그림, 비디오, 그리고 다양한 공유 서비스를 2011년도부터 제공하던 한 사이트에 사용되던 도메인 네임으로 현재 해당 사이트에 접속하면 2017년 2월 20일에 해당 사이트 운영과 서비스가 중지된다는 안내 메시지를 보여주고 있습니다. ▼&lt;/p&gt;

&lt;p&gt;우리 시각으로는 이미 이틀 전에 해당 사이트와 도메인 네임은 사용이 중지된 셈인데요, &amp;ldquo;이제는 iCloud.net을 보내주어야 할 것 같다(it is time for him to retire)&amp;ldquo;며 해당 사이트에 등록된 계정을 삭제할 것을 안내하는 메시지가 마음 한구석을 애잔하게 만드는 것 같습니다. ▼&lt;/p&gt;

&lt;p&gt;그러나 정작 이 &amp;lsquo;iCloud.net&amp;rsquo;이 서비스를 중지하게 된 이유를 &amp;lsquo;TechCrunch&amp;rsquo;는 애플이 &amp;lsquo;iCloud.net&amp;rsquo; 도메인 네임을 150만불에 인수하여 올해 말 즈음에 시작될 새로운 애플의 소셜네트워크 서비스에 사용하려는 의도 내지는 &amp;lsquo;iCloud&amp;rsquo;와 관련된 모든 유사한 도메인 네임을 소유하려는 것으로 보인다고 전하고 있으며 맥루머스와 애플인사이더는 각각 그들의 소식통을 인용하여 애플이 구매 및 인수한 것이 확실해 보인다고도 전하고 있습니다.&lt;/p&gt;

&lt;p&gt;애플은 &amp;lsquo;iCloud.com&amp;rsquo;을 지난 2011년, 스웨덴의 기업인&amp;rsquo; Xcerion&amp;rsquo;으로 부터 약 450만 불에 인수했었고 현재 iCloud와 연관된 도메인네임(iCloud.us, iCloud.eu, iCloudApps.com, iCloudAds.com등등) 을 약 170여 개 정도 소유하고 있는 것으로 알려져 있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>차기 &#39;맥북프로 터치 바 모델&#39;에 &#39;카비레이크 프로세서&#39; 탑재 가능 단서 발견</title>
      <link>https://hechek.github.io/blog/2017-02-20-%EC%B0%A8%EA%B8%B0-%EB%A7%A5%EB%B6%81%ED%94%84%EB%A1%9C-%ED%84%B0%EC%B9%98-%EB%B0%94-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%B9%B4%EB%B9%84%EB%A0%88%EC%9D%B4%ED%81%AC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C-%ED%83%91%EC%9E%AC-%EA%B0%80%EB%8A%A5-%EB%8B%A8%EC%84%9C-%EB%B0%9C%EA%B2%AC/</link>
      <pubDate>Mon, 20 Feb 2017 00:52:37 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-20-%EC%B0%A8%EA%B8%B0-%EB%A7%A5%EB%B6%81%ED%94%84%EB%A1%9C-%ED%84%B0%EC%B9%98-%EB%B0%94-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%B9%B4%EB%B9%84%EB%A0%88%EC%9D%B4%ED%81%AC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C-%ED%83%91%EC%9E%AC-%EA%B0%80%EB%8A%A5-%EB%8B%A8%EC%84%9C-%EB%B0%9C%EA%B2%AC/</guid>
      <description>&lt;p&gt;오늘 배포된 두 번째 &amp;lsquo;macOS 10.12.4 개발자 베타 버전&amp;rsquo;의 내부 파일을 들여다본 결과 7세대 인텔 코어 프로세서인 &amp;lsquo;카비레이크&amp;rsquo;가 탑재될 수도 있다는 단서가 있음을 &amp;lsquo;애플인사이더&amp;rsquo;, &amp;lsquo;9to5mac&amp;rsquo; 등 여러 해외 IT 매체들이 일제히 기사를 실었습니다.&lt;/p&gt;

&lt;p&gt;이 단서들은 애플 관련 전문 블로그인  &amp;lsquo;파이크스 유니버즘(Pike &amp;rsquo;s Universum)&amp;lsquo;에 의해 밝혀진 것으로 지난 1월 &amp;lsquo;CES 2017&amp;rsquo;에서 &amp;lsquo;카비레이크 프로세서들&amp;rsquo;이 맥 제품군에 탑재될 것으로 점쳐지는 발표가 있은 후이기에 그 의미가 크게 느껴집니다.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;파이크스 유니버즘(Pike&amp;rsquo;s Universum)&amp;lsquo;은 오늘 배포된(우리나라 시각) &amp;lsquo;macOS 10.12.4 개발자 버전 2&amp;rsquo;의 하드웨어 관련 코드를 살펴보던 중 아래와 같이 현재 출시된 맥북프로와는 다른 종류의 코드들이 담겨 있는 것을 확인하였고 이를 근거로 다음에 발표될 2세대 &amp;lsquo;맥북프로&amp;rsquo; 제품군에 &amp;lsquo;카비레이크 프로세서&amp;rsquo;의 탑재를 점치고 있습니다.&lt;/p&gt;

&lt;p&gt;프로세서 자체의 성능은 스카이레이크와 비교해서 월등히 향상된 느낌이 들 수는 없지만, 전력 효율에 따른 배터리 지속 시간 향상과 내장 그래픽의 성능이 기대된다는 평가를 받는 &amp;lsquo;카비레이크 프로세서&amp;rsquo;인데요, 특히나 &amp;lsquo;전력 효율 향상&amp;rsquo;에 따라 현재 맥북프로의 램이 기존 16GB에서 32GB로 늘어날 수도 있을 것이라는 예측도 심심치 않게 나오고 있습니다.?&lt;/p&gt;

&lt;p&gt;하지만 애플은 아직도(다른 의미에서 여전히) DDR4 RAM 지원이나 기존의 최대 RAM 용량의 업그레이드에 관한 어떠한 정보도 보여주지 않기에 이 부분은 미루어 두더라도 &amp;lsquo;카비레이크 프로세서&amp;rsquo;가 장착된 2세대 맥북프로가 올해 안에 출시가 될까요?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It’s been a while since Burp</title>
      <link>https://hechek.github.io/blog/2017-02-16-its-been-a-while-since-burp/</link>
      <pubDate>Thu, 16 Feb 2017 22:20:39 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-its-been-a-while-since-burp/</guid>
      <description>&lt;p&gt;It’s been a while since Burp part four and I want to continue writing these. It’s time to actually proxy applications. However I have three problems: I was too busy at work. I could not find a lot of interesting applications that are interesting to proxy and can showcase different Burp functionalities that we talked about. I found some interesting applications but there were security vulns so I am going through disclosure (unfortunately I may never be able to release them publicly).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloudfront and TLS</title>
      <link>https://hechek.github.io/blog/2017-02-16-cloudfront-and-tls/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:53 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-cloudfront-and-tls/</guid>
      <description>&lt;p&gt;I finally decided to cave in and take advantage of the Amazon Cloudfront free TLS certificate. I know I will end up paying more than what I already do but I pay few bucks each month. Each month I pay one dollar for two hosted zones and another dollar or so for the bandwidth. Even if I was still in my home country, I would have been able to pay this as it is less than a large pizza even where I lived.&lt;/p&gt;

&lt;p&gt;If you are interested in free hosting alternatives, you can use Github-pages, Bitbucket or just go with the excellent Gitlab-Pages (which supports Hugo and whole lot of other static website generators natively).&lt;/p&gt;

&lt;p&gt;It took me a lot of tries and probably burning a good amount of money on Cloudfront invalidation requests (otherwise I had to wait for a day or so to see the changes) but it finally worked. The trick was to setup the origin policy during creation of the distribution as it cannot be modified through the web portal after that.&lt;/p&gt;

&lt;p&gt;Burp part five is still on hold for now because I am doing something else.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Looking for Apps to Proxy</title>
      <link>https://hechek.github.io/blog/2017-02-16-looking-for-apps-to-proxy/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:50 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-looking-for-apps-to-proxy/</guid>
      <description>&lt;p&gt;It’s been a while since Burp part four and I want to continue writing these. It’s time to actually proxy applications. However I have three problems:&lt;/p&gt;

&lt;p&gt;I was too busy at work.
I could not find a lot of interesting applications that are interesting to proxy and can showcase different Burp functionalities that we talked about.
I found some interesting applications but there were security vulns so I am going through disclosure (unfortunately I may never be able to release them publicly).
The last point was a surprise, these are decently popular apps and I could not believe that no one has looked at them before.&lt;/p&gt;

&lt;p&gt;Nevertheless, I will continue soon.&lt;/p&gt;

&lt;p&gt;In the meanwhile, Burp version 1.7 has been released. Now we have Burp projects. Instead of saving the state everyday, we can use one project file that contains all the items. Pretty cool. Some of the items have changed, especially options. Now it has User Options and Project Options but the options by themselves are still there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>App Manager Scanning</title>
      <link>https://hechek.github.io/blog/2017-02-16-app-manager-scanning/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:47 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-app-manager-scanning/</guid>
      <description>&lt;p&gt;Close the application and restart it again (there is one request that we want to see).&lt;/p&gt;

&lt;p&gt;First request is a weird one. It is asking the server for the current date and time via a GET request to &lt;a href=&#34;http://appmanager.filehippo.com/api/v1/DateTime&#34; target=&#34;_blank&#34;&gt;http://appmanager.filehippo.com/api/v1/DateTime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Get DateTime
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
GET /api/v1/DateTime HTTP/1.1
User-Agent: download_manager
ClientId: 4dfe2b82-501c-4324-83ce-6d49a96cdf61
AppManagerVersion: 2.0.0.392
AccessToken: 2N0+YwVnSXph9L0ZuS8zOmnSvvKHq10QYMtuM0GdUVmLp067RfBBpw==
RequestTime: 2016-05-17T04:47:25.3968037Z
Host: appmanager.filehippo.com
Connection: close&lt;/p&gt;

&lt;p&gt;Response body:
{&amp;ldquo;DateTime&amp;rdquo;:&amp;ldquo;2016-05-17T04:47:57.0719162Z&amp;rdquo;,&amp;ldquo;Status&amp;rdquo;:0,&amp;ldquo;Message&amp;rdquo;:null}
Note the AccessToken which is a 40 byte blob in base64. For this request we can remove the AccessToken and it works. Why would the app get the date and time from the server?&lt;/p&gt;

&lt;p&gt;Then the app requests &lt;a href=&#34;http://appmanager.filehippo.com/api/v1/ProgramDefinitions&#34; target=&#34;_blank&#34;&gt;http://appmanager.filehippo.com/api/v1/ProgramDefinitions&lt;/a&gt; which is a list of all applications that are supported by the App Manager. This request also contains the AccessToken header which contains a base64 encoded 40 byte blob. It seems like this access token is also time sensitive because if you send the request to Repeater and then send it after 10 minutes the response is 401 Unauthorized while this did not happen in the DateTime request. At this point we do not know where this access token comes from because it is not in any of the responses (up until now we have only done the proxy test). There is also a 32 byte GUID named ClientId. Based on the previous request and the ClientId header, you can probably guess how the AccessToken is generated.&lt;/p&gt;

&lt;p&gt;Retrieving program definitions
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
Request:
GET /api/v1/ProgramDefinitions HTTP/1.1
User-Agent: download_manager
ClientId: &amp;hellip;
AppManagerVersion: 2.0.0.392
AccessToken: &amp;hellip;
RequestTime: 2016-05-15T21:56:10.2127122Z
Host: appmanager.filehippo.com
Connection: close&lt;/p&gt;

&lt;p&gt;Response body:
{
    &amp;ldquo;Status&amp;rdquo;: 0,
    &amp;ldquo;Message&amp;rdquo;: null,
    &amp;ldquo;Definitions&amp;rdquo;: [
        {
            &amp;ldquo;DetectionXML&amp;rdquo;: &amp;ldquo;&lt;fp&gt;\r\n    &lt;fn&gt;abiword.exe&lt;/fn&gt;\r\n    &lt;pfloc&gt;abisuite2\abiword\bin&lt;/pfloc&gt;\r\n&lt;/fp&gt;\r\n&lt;fp&gt;\r\n    &lt;fn&gt;abiword.exe&lt;/fn&gt;\r\n    &lt;pfloc&gt;abiword\bin&lt;/pfloc&gt;\r\n&lt;/fp&gt;\r\n&lt;reg&gt;\r\n    &lt;k hive=\&#34;hklm\&#34; key=\&#34;software\\abisuite\\abiword\\v2\&#34;&gt;\r\n        &lt;v name=\&#34;Version\&#34;/&gt;\r\n    &lt;/k&gt;\r\n&lt;/reg&gt;\r\n&lt;reg&gt;\r\n    &lt;k hive=\&#34;hklm\&#34; key=\&#34;software\\abiword\\v2\&#34;&gt;\r\n        &lt;v name=\&#34;Version\&#34;/&gt;\r\n    &lt;/k&gt;\r\n&lt;/reg&gt;&amp;rdquo;,
            &amp;ldquo;ProgramId&amp;rdquo;: 135
        },
        {
            &amp;ldquo;DetectionXML&amp;rdquo;: &amp;ldquo;&lt;fp&gt;\r\n    &lt;fn&gt;ACDSee&lt;em&gt;.exe&lt;/fn&gt;\r\n    &lt;pfloc&gt;ACD Systems\ACDSee\*&lt;/pfloc&gt;\r\n&lt;/fp&gt;\r\n&lt;fp&gt;\r\n    &lt;fn&gt;ACDSee&lt;/em&gt;.exe&lt;/fn&gt;\r\n    &lt;pfloc&gt;ACD Systems\ACDSee\17.0&lt;/pfloc&gt;\r\n&lt;/fp&gt;\r\n&lt;fp&gt;\r\n    &lt;fn&gt;ACDSee*.exe&lt;/fn&gt;\r\n    &lt;pfloc&gt;ACD Systems\ACDSee\18.0&lt;/pfloc&gt;\r\n&lt;/fp&gt;&amp;rdquo;,
            &amp;ldquo;ProgramId&amp;rdquo;: 83
        },
        &amp;hellip;
Next is a POST request to &lt;a href=&#34;http://appmanager.filehippo.com/api/v1/ScanResults&#34; target=&#34;_blank&#34;&gt;http://appmanager.filehippo.com/api/v1/ScanResults&lt;/a&gt; with a JSON payload in the body. The payload contains information about installed programs. The access token is also different.&lt;/p&gt;

&lt;p&gt;POST ScanResults
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
parts of request&amp;rsquo;s body:
{
    &amp;ldquo;Programs&amp;rdquo;: [
        {
            &amp;ldquo;Registry&amp;rdquo;: [],
            &amp;ldquo;Id&amp;rdquo;: 298,
            &amp;ldquo;Files&amp;rdquo;: [
                {
                    &amp;ldquo;VerPv&amp;rdquo;: &amp;ldquo;2.0.0.392&amp;rdquo;,
                    &amp;ldquo;VerPvr&amp;rdquo;: &amp;ldquo;2.0.0.392&amp;rdquo;,
                    &amp;ldquo;Len&amp;rdquo;: 10566352,
                    &amp;ldquo;VerFv&amp;rdquo;: &amp;ldquo;2.0.0.392&amp;rdquo;,
                    &amp;ldquo;VerFvr&amp;rdquo;: &amp;ldquo;2.0.0.392&amp;rdquo;,
                    &amp;ldquo;File&amp;rdquo;: &amp;ldquo;C:\Program Files (x86)\FileHippo.com\FileHippo.AppManager.exe&amp;rdquo;,
                    &amp;ldquo;Md5&amp;rdquo;: &amp;ldquo;6798339CF7C87F5F567A8F050614D6B8&amp;rdquo;
                }
            ]
        },
        {
            &amp;ldquo;Registry&amp;rdquo;: [],
            &amp;ldquo;Id&amp;rdquo;: 12,
            &amp;ldquo;Files&amp;rdquo;: [
                {
                    &amp;ldquo;VerPv&amp;rdquo;: &amp;ldquo;46.0.1&amp;rdquo;,
                    &amp;ldquo;VerPvr&amp;rdquo;: &amp;ldquo;46.0.1.0&amp;rdquo;,
                    &amp;ldquo;Len&amp;rdquo;: 392136,
                    &amp;ldquo;VerFv&amp;rdquo;: &amp;ldquo;46.0.1&amp;rdquo;,
                    &amp;ldquo;VerFvr&amp;rdquo;: &amp;ldquo;46.0.1.5966&amp;rdquo;,
                    &amp;ldquo;File&amp;rdquo;: &amp;ldquo;C:\Program Files (x86)\Mozilla Firefox\firefox.exe&amp;rdquo;,
                    &amp;ldquo;Md5&amp;rdquo;: &amp;ldquo;7DF8845A1CF92C227E81DBBC6F6434DF&amp;rdquo;
                }
            ]
        }
        &amp;hellip;
}
The response contains links to the applications that have updates. For example in this case, Firefox 47 Beta 2.0 is available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thick Client Proxying - Part 5: FileHippo App Manager or the Bloated Hippo</title>
      <link>https://hechek.github.io/blog/2017-02-16-thick-client-proxying---part-5-filehippo-app-manager-or-the-bloated-hippo/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:43 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-thick-client-proxying---part-5-filehippo-app-manager-or-the-bloated-hippo/</guid>
      <description>&lt;p&gt;I have talked a lot about this and that but have done nothing in action. Now I will talk about proxying actual applications. I will start with something easy, the FileHippo App Manager. This app was chosen because it can be proxied with Burp, it does not use TLS and it has its own proxy settings (also works with Internet Explorer proxy settings). The requests are pretty simple to understand. I like the FileHippo website because it archives old versions of software. For example I loved the non-bloated Yahoo! Messenger 8.0 when I used it (it’s pretty popular in some places) and used FileHippo to download the old versions.&lt;/p&gt;

&lt;p&gt;FileHippo App Manager turned out to be more interesting than I thought and this post turned into some .NET reverse engineering using dnSpy. Here’s what I talk about in this post:&lt;/p&gt;

&lt;p&gt;The app contains the AWS SDK and a fortunately invalid set of AWS Access/Secret keys. Both the SDK and the keys are in dead code.
Requests have an AccessToken header which is generated client-side. We will discuss how it is generated.
The application has a “hidden” DEBUG mode which unfortunately does nothing special. We will discover how to enable it.
Note: I attempted to contact both Well Known Media (parent company of FileHippo) and FileHippo via their security addresses. security@filehippo.com and security@wkmedia.com do not exist. I contacted them via their only email on the Well Known Media website which is adsales@wkemdia.com and got no response. I tried to check the validity of the keys using the most non-intrusive way possible as discussed below and fortunately they were not valid so I went ahead and shared the adventure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ingredients
Windows 7 VM
FileHippo App Manager 2.0 beta 4
Burp free
JSON Decoder plugin from Burp’s App Store
dnSpy&lt;/li&gt;
&lt;li&gt;Proxying
2.1 Proxy settings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Install and run the application. Click on the Settings gear icon to the left and then select the Connection tab to see the proxy settings.&lt;/p&gt;

&lt;p&gt;Application&amp;rsquo;s proxy settings
Application&amp;rsquo;s proxy settings
As you can see, the application supports its own proxy settings and also can use IE proxy settings via the Auto-detect proxy settings for this network. It does not really matter which method is chosen, we can use both of these to point the application to Burp. Point it to Burp’s proxy listener (default is 127.0.0.1:8080), run Burp and then press Test.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Go</title>
      <link>https://hechek.github.io/blog/2017-02-16-learning-go/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:32 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-learning-go/</guid>
      <description>&lt;p&gt;I have decided to learn Go (or Golang). I went through the Tour of Go and made some notes. Some of the items/code are directly copy pasted from there. The notes are just a cheatsheet to help me look things up quickly while learning. I will update that page as I learn more.&lt;/p&gt;

&lt;p&gt;You can see the notes at &lt;a href=&#34;https://parsiya.net/go/&#34; target=&#34;_blank&#34;&gt;https://parsiya.net/go/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Portproxy in Action</title>
      <link>https://hechek.github.io/blog/2017-02-16-portproxy-in-action/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:28 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-portproxy-in-action/</guid>
      <description>&lt;p&gt;Let’s do something simple first, we want to redirect anything that goes to 127.0.0.1:8888 to Google.com:443.&lt;/p&gt;

&lt;p&gt;Open an admin command prompt and run this command (protocol=tcp is optional because Portproxy only supports TCP):&lt;/p&gt;

&lt;p&gt;netsh interface portproxy add v4tov4 listenport=9090 listenaddress=127.0.0.1
 connectaddress=216.58.217.78 connectport=443 protocol=tcp
Remember to remove the new line (I have split the command into two lines for better readability).&lt;/p&gt;

&lt;p&gt;This command creates a listener on localhost:9090 and forwards all traffic to 216.58.217.78:443 (which is Google for me - you will probably get a different IP address if you ping it).&lt;/p&gt;

&lt;p&gt;We can display all current portproxy listeners using netsh interface portproxy show all.&lt;/p&gt;

&lt;p&gt;In the same admin command prompt run this command to see the listener: netstat -anb | findstr 9090.&lt;/p&gt;

&lt;p&gt;Portproxy to Google
Portproxy to Google
Now open a browser and navigate to &lt;a href=&#34;https://localhost:9090&#34; target=&#34;_blank&#34;&gt;https://localhost:9090&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Obviously bad certificate
Obviously bad certificate
Accept the security exception and we will see:&lt;/p&gt;

&lt;p&gt;Somewhere in Google land
Somewhere in Google land
Not exactly Google.com but you know what we accomplished.&lt;/p&gt;

&lt;p&gt;Other Uses&lt;/p&gt;

&lt;p&gt;Apart from doing failed tricks we can do other things with this. As we saw we can redirect local resources to remote ones. Another is port changing, we can redirect the traffic to localhost via different means (e.g. hosts file) but the port is still the original one used by the application. Using this we can redirect the port to another one on a remote machine (e.g. a VM running a proxy tool). In other words we will not need the Traffic Redirector Burp extension anymore.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Netsh Interface Portproxy</title>
      <link>https://hechek.github.io/blog/2017-02-16-windows-netsh-interface-portproxy/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:24 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-windows-netsh-interface-portproxy/</guid>
      <description>&lt;p&gt;I thought I had found the Windows iptables with Portproxy but I was wrong. But I learned something neat in the process and I am documenting it to access it when I need it.&lt;/p&gt;

&lt;p&gt;Portproxy allows you to listen on a certain port on one of your network interfaces (or all interfaces) and redirect all traffic to that interface (on your computer) to another port/IP address.&lt;/p&gt;

&lt;p&gt;The to that interface is the limitation that unfortunately kills it. This will be a short post.&lt;/p&gt;

&lt;p&gt;A typical Portproxy command is like this:&lt;/p&gt;

&lt;p&gt;netsh interface portproxy add v4tov4 listenport=9090 listenaddress=192.168.0.100
 connectaddress=192.168.1.200 connectport=9095
So I thought I could change the listenaddress:listenport and redirect all outgoing traffic to that IP:port to wherever I wanted (e.g. localhost) and not use the Windows etc\hosts file. But I was wrong, the command creates a listener on the interface with the listeneraddress IP and redirects all TCP traffic. In other words, the listeneraddress needs to be the IP of an interface of your machine. The traffic needs to be destined for your machine to be able to be redirected with this command. Well bummer.&lt;/p&gt;

&lt;p&gt;Install IPv6 Support&lt;/p&gt;

&lt;p&gt;Before we start, install IPv6 support in your OS. According to KB555744 Portproxy may not work if IPv6 support is not installed.&lt;/p&gt;

&lt;p&gt;Why? I don’t know but I think because Portproxy supports both IPv4 and IPv6 addresses which is a good thing. If you look at the MSDN link you can see the four variations that mix v4 and v6 addresses.&lt;/p&gt;

&lt;p&gt;Portproxy in Action&lt;/p&gt;

&lt;p&gt;Let’s do something simple first, we want to redirect anything that goes to 127.0.0.1:8888 to Google.com:443.&lt;/p&gt;

&lt;p&gt;Open an admin command prompt and run this command (protocol=tcp is optional because Portproxy only supports TCP):&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Paimei Stalker or Similar tools (by Pedram Amini)</title>
      <link>https://hechek.github.io/blog/2017-02-16-use-paimei-stalker-or-similar-tools-by-pedram-amini/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:20 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-use-paimei-stalker-or-similar-tools-by-pedram-amini/</guid>
      <description>&lt;p&gt;SetBP(Address, function_to_call_when_the_address_is_reached)
Twitch died again :(&lt;/p&gt;

&lt;p&gt;Monitor the environment.
Use these tools. * Linux: strace and ltrace. * On Windows : Process Monitor.&lt;/p&gt;

&lt;p&gt;Example from a CTF.
Mixer: It needed a certain library. So you have to install all dependencies. Use “ldd” to check if you have everything.&lt;/p&gt;

&lt;p&gt;LD_LIBRARY_PATH environmental variable.
readelf -l binaryname
will show us which loader is needed for this library.&lt;/p&gt;

&lt;p&gt;It loaded the application in GDB but could not debug.
Two solutions: 1. Attach after running, bad idea. 2. Manually enter CC CC at EP by ediuting the hex. 3. Then run it in GDB.&lt;/p&gt;

&lt;p&gt;You do not need to analyze everything - probably the most important thing when doing RE
If you have a blackbox with a small-ish input/output space, let it run and look at output to find out what it does.&lt;/p&gt;

&lt;p&gt;The tool might be wrong. Check the output.
Entropy is a good recon tool.
Know Crypto and other stuff and be able to recognize it.
I asked him for an alternative to IDA pro for x64 binaries. He didn’t have any alternatives as he uses IDA Pro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gynvael Coldwind - Garage4Hackers - Notes from March 2014</title>
      <link>https://hechek.github.io/blog/2017-02-16-gynvael-coldwind---garage4hackers---notes-from-march-2014/</link>
      <pubDate>Thu, 16 Feb 2017 22:12:15 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-gynvael-coldwind---garage4hackers---notes-from-march-2014/</guid>
      <description>&lt;p&gt;Back in March 2014, Garage4Hackers had a live stream with Gynvael Coldwind. His talk was named &amp;ldquo;Data, data, data! I can&amp;rsquo;t make bricks without clay&amp;rdquo; or a few practical notes on reverse-engineering. You can see the recording on youtube.&lt;/p&gt;

&lt;p&gt;Here are my notes that I discovered from 2014.&lt;/p&gt;

&lt;p&gt;Notes Garage4Hackers RE webinar by Gynvael Coldwind (Google)
His website: &lt;a href=&#34;http://gynvael.coldwind.pl&#34; target=&#34;_blank&#34;&gt;http://gynvael.coldwind.pl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If ASM is hard, translate it to C for yourself.&lt;/p&gt;

&lt;p&gt;Read through the manual and try to write your own pseudo-C code to understand it better.&lt;/p&gt;

&lt;p&gt;Trace things&lt;/p&gt;

&lt;p&gt;So if there are a lot of jumps with instructions in the middle.
He wrote a GDB script to just go through the jumps and collect all of the instructions in between to simplify the assembly.
Some debuggers have tracing as a separate option. E.g. OllyDBG&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pelock.com/products/obfuscator&#34; target=&#34;_blank&#34;&gt;http://pelock.com/products/obfuscator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitch died and missed this tip name.&lt;/p&gt;

&lt;p&gt;If you are working on an strange platform (e.g. IBM S/390), look at the manual and find the op-codes and go through them and translate them for yourself.
Write a simple script to add instruction descriptions to the disassembled code. So you can have a description of what it does with every instruction and you do not have to go through the manual for each op-code again.&lt;/p&gt;

&lt;p&gt;Be prepared to make your own tools&lt;/p&gt;

&lt;p&gt;Diassembly Engines
His favorite is “distorm” hosted on &lt;a href=&#34;https://code.google.com/p/distorm/&#34; target=&#34;_blank&#34;&gt;https://code.google.com/p/distorm/&lt;/a&gt;. You can use it inside Python scripts to disassembler binaries from starting to end addresses.&lt;/p&gt;

&lt;p&gt;Debug APIs
Talked about useful debug APIs. E.g. CreateRemoteThread.&lt;/p&gt;

&lt;p&gt;Twitch went down again.&lt;/p&gt;

&lt;p&gt;CPU Specific Stuff (x86)
Software breakpoints (CC aka int3).
You can run code generator for Linux run on Windows with some changes.
Change the dependencies, addressing and I/O.
Goes through an example of a hash function in a Linux binary and then writing C code to allocate memory address at a specific address and then copying the hash function from Linux and putting it on the memory and then calling the function from the C code in windows.
GDB is your friend even if you like others.
It runs on any modern OS.
Works with various GDB stubs (e.g. QEMU).
Is scriptable in Python and GDB script.
Is not well suited for anti-RE tricks.
Scripting, use Python. WinDbg - Olly - IDA - Immunity and GDB support.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why do I Need to Know How Proxies Work?</title>
      <link>https://hechek.github.io/blog/2017-02-16-why-do-i-need-to-know-how-proxies-work/</link>
      <pubDate>Thu, 16 Feb 2017 22:09:56 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-why-do-i-need-to-know-how-proxies-work/</guid>
      <description>&lt;p&gt;Note that the RFC instructs clients to send the absolute-URI no matter what (even if they are using a CONNEC request) as we will see shortly.&lt;/p&gt;

&lt;p&gt;The proxy uses this absolute-URI to forward the request to the endpoint (in this case Yahoo!). Both forwarding and TLS terminating proxies work similarly in this case because they both can look inside HTTP payloads.&lt;/p&gt;

&lt;p&gt;HTTP proxy in action
HTTP proxy in action
Browser establishes a TCP connection to proxy.
Browser sends the HTTP request (with an absolute-URI) to proxy.
Proxy establishes a TCP connection to yahoo.com (using the absolute-URI).
Proxy forwards the HTTP request.
Proxy receives the response.
Proxy closes the connection to yahoo.com.
Proxy forwards the response to browser.
Proxy signals to close the connection (using FIN).
Connection between browser and Proxy is closed.
3.1.1. Why not Use the Host Header?
If you have done at least a bit of HTTP security testing (or have seen some HTTP requests), you are probably asking “why not just use the Host header?” That is a very good question and it was mine too. We are the proxy and we see the Host header, why do we need to use the absolute-URI instead?&lt;/p&gt;

&lt;p&gt;The answer is backward compatibility with HTTP/1.0 proxies. This is hinted in section 5.4. Host of RFC7230:&lt;/p&gt;

&lt;p&gt;A client MUST send a Host header field in an HTTP/1.1 request even if the request-target is in the absolute-form, since this allows the Host information to be forwarded through ancient HTTP/1.0 proxies that might not have implemented Host.&lt;/p&gt;

&lt;p&gt;Later it instructs proxies to rely on the absolute-URI and ignore the Host header. If the Host header is different from the URI, then the proxy must generate the correct header and send it with the request.&lt;/p&gt;

&lt;p&gt;3.2. Forwarding Proxy and HTTPs&lt;/p&gt;

&lt;p&gt;But what about HTTP(s) forwarding proxies? How do they work?&lt;/p&gt;

&lt;p&gt;Again let’s put ourselves in place of the forwarding proxy. We do not do TLS handshakes and just forward things around. After the user types &lt;a href=&#34;https://www.google.com&#34; target=&#34;_blank&#34;&gt;https://www.google.com&lt;/a&gt; in their browser, it creates a TCP connection to us and then starts the TLS handshake. The first step of a TLS handshake is ClientHello discussed in RFC5246 section 7.4.1.2. (RFC5246 is essentially TLS 1.2).&lt;/p&gt;

&lt;p&gt;ClientHello sent from browser to proxy
ClientHello sent from browser to proxy
Now I did not read the TLS 1.2 RFC completely and I doubt you need to either. As the proxy, we will see a ClientHello like this:&lt;/p&gt;

&lt;p&gt;ClientHello as seen by proxy
ClientHello as seen by proxy
But we are a proxy and we should know what it means. Tools should be able to do this for us. In this case I used Netmon and it decodes the ClientHello like this:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thick Client Proxying - Part 6: How HTTP(s) Proxies Work</title>
      <link>https://hechek.github.io/blog/2017-02-16-thick-client-proxying---part-6-how-https-proxies-work/</link>
      <pubDate>Thu, 16 Feb 2017 22:01:19 +0900</pubDate>
      
      <guid>https://hechek.github.io/blog/2017-02-16-thick-client-proxying---part-6-how-https-proxies-work/</guid>
      <description>&lt;p&gt;In order to create our own custom proxies, first we need to know how proxies work. When I wanted to write a custom proxy tool (it’s a simple Python script) in Hipchat part3, I had to go back and learn how they work. I did not find such a resource online that looked at proxies from an infosec perspective. Most talked about how to configure caching or forwarding proxies and not much about MitM ones. I have briefly talked about it in the section 2 of the same post named How does a Proxy Work?. In this post I am going to take a deep(er) dive. I actually read some RFCs and they were surprisingly well written.&lt;/p&gt;

&lt;p&gt;If you want to skip the intro, go to section 3.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why do I Need to Know How Proxies Work?
That is a fair question. Most of the time, we pipe the browser to Burp and it works out of the box. However, if something small changes we will go into panic mode. What if the webapp uses a Java or Silverlight component and it has some quirky things? Another reason is for proxying thick clients because Burp as you have seen here is not just for webapps. My opinion is “if the application uses HTTP, you can Burp it.” Thick clients may not work out of the box when proxied (often just redirecting their traffic to the proxy is a pain). If we do not know how proxies work internally, we cannot troubleshoot the issues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now convinced that you need to read this right? riiiiiiiiiiiiight?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Become One with the Proxy
It really helps to put ourselves in place of the proxy when reading this. At least that is what worked for me. Proxy does not know whatever happens in the system like an observer. As an observer we can just make decisions about what the proxy should do. Things like “the user typed google.com in their browser so the proxy must send the request to google.com.” Well, how does the proxy know that? The proxy cannot magically see the browser’s address bar.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.1. What does it Mean?&lt;/p&gt;

&lt;p&gt;We are the proxy. The only things we see are the requests/packets that the client (e.g. browser) and the endpoint send to us. We do not know anything else. And as a proxy we must decide what to do with the requests that we receive with only our knowledge.&lt;/p&gt;

&lt;p&gt;Now that we are hopefully in the zone, let’s start.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Brief Intro to Two Types of Proxies
I am going to talk about two types of proxies here.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Forwarding proxies
TLS terminating proxies
The descriptions are not entirely accurate or detailed but are enough for our purpose. Of course this is not an exhaustive list. There are other proxies out there but these are the ones that we are interested in. To be honest we are only interested in TLS terminating proxies.&lt;/p&gt;

&lt;p&gt;2.1. Forwarding Proxies&lt;/p&gt;

&lt;p&gt;We have all seen them before. These are corporate proxies that we see and use everyday. If you are in a corporate environment, check the proxy auto-config (pac) scripts. Essentially it’s a text file that tells the application where to send the traffic and re-routes the traffic based on the endpoint. Usually if the endpoint is internal, things get routed normally through the internal network otherwise (requests sent over the internet) requests are sent to a forwarding proxy. You can see some examples at Microsoft Technet. From the point of view of the application, the forwarding proxy is sitting between the internal network and the internet.&lt;/p&gt;

&lt;p&gt;Based on the name, these proxies just forward packets and cannot look inside encrypted payloads (e.g. TLS). From the point of view of a typical forwarding proxy, an established TLS connection is just a bunch of packets with random looking TCP payloads.&lt;/p&gt;

&lt;p&gt;2.2. TLS Terminating Proxies&lt;/p&gt;

&lt;p&gt;Burp is the prime example of this type. If you know what Burp does (and you probably do because you are reading this), you know what a TLS terminating proxy does. These are proxies that usually MitM the connections and unwrap TLS to look inside the payloads.&lt;/p&gt;

&lt;p&gt;They could be applications like Burp or Fiddler which are usually used for (security) testing. Or could be appliances like Bluecoat or the SSL decryption module of Palo Alto Networks’ “thing” (whatever it is named). Usually these appliances are used for deep packet inspection.&lt;/p&gt;

&lt;p&gt;You could make Burp work like a forwarding proxy by adding all endpoints to Burp’s SSL Pass Through. This is useful for troubleshooting connections.&lt;/p&gt;

&lt;p&gt;2.2.1. It’s not Always TLS
True. Sometimes our proxy decrypts (or decodes) layers of non-TLS encryption (or encoding). I am classifying all of these proxies under this category because TLS has become the most common way of protecting data in transit.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How HTTP(s) Proxies work
Now we get to the main part. In all examples we have a browser that uses a proxy (via some proxy settings) and the browser knows that it is connected to a proxy (I will talk about this later).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.1. HTTP Proxy&lt;/p&gt;

&lt;p&gt;In this case the browser is using plain HTTP (meaning there’s no TLS). Both forwarding and TLS terminating proxies work similarly in this case.&lt;/p&gt;

&lt;p&gt;Let’s assume we have typed &lt;a href=&#34;http://www.yahoo.com&#34; target=&#34;_blank&#34;&gt;http://www.yahoo.com&lt;/a&gt; in the browser. Let’s forget that we get a 302 redirect in the real world and assume yahoo.com is available over HTTP. I probably should have used example.com instead but I am lazy and don’t want to create the diagrams again.&lt;/p&gt;

&lt;p&gt;The browser establishes a TCP connection to the proxy (the famous SYN-SYNACK-ACK) and then sends the GET request.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>